// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id
  username            String               @db.VarChar
  color               String               @db.VarChar
  checkmark           String?              @db.Char(7)
  badge               String?              @db.VarChar
  profile             Profile?
  snapshots           Snapshot[]
  replies             Reply[]
  pastes              Paste[]
  judgements          Judgement[]
  discussionTakedowns DiscussionTakedown[]
  replyTakedowns      ReplyTakedown[]
}

enum Color {
  Gray
  Blue
  Green
  Orange
  Red
  Purple
}

model Profile {
  user       User     @relation(fields: [uid], references: [id])
  uid        Int      @id
  name       String
  slogan     String?
  badge      String?
  isAdmin    Boolean
  isBanned   Boolean
  color      Color
  ccfLevel   Int
  background String
  isRoot     Boolean?
  updatedAt  DateTime @updatedAt
}

model Discussion {
  id         Int                 @id
  time       DateTime            @db.Timestamp(0)
  snapshots  Snapshot[]
  replyCount Int
  replies    Reply[]
  takedown   DiscussionTakedown?
}

model Snapshot {
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId Int
  time         DateTime   @default(now())
  until        DateTime   @updatedAt
  title        String     @db.VarChar
  forum        String     @db.VarChar
  author       User       @relation(fields: [authorId], references: [id])
  authorId     Int
  content      String     @db.Text

  @@id([discussionId, time])
  @@index([discussionId])
  @@index([authorId])
}

model Reply {
  id           Int            @id
  discussion   Discussion     @relation(fields: [discussionId], references: [id])
  discussionId Int
  time         DateTime       @db.Timestamp(0)
  author       User           @relation(fields: [authorId], references: [id])
  authorId     Int
  content      String         @db.Text
  takedown     ReplyTakedown?

  @@index([discussionId])
  @@index([authorId])
}

model DiscussionTakedown {
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId Int        @id
  reason       String
  submitter    User       @relation(fields: [submitterId], references: [id])
  submitterId  Int
}

model ReplyTakedown {
  reply       Reply  @relation(fields: [replyId], references: [id])
  replyId     Int    @id
  reason      String
  submitter   User   @relation(fields: [submitterId], references: [id])
  submitterId Int
}

model Paste {
  id        String          @id @db.Char(8)
  time      DateTime        @db.Timestamp(0)
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  snapshots PasteSnapshot[]

  @@index([userId])
}

model PasteSnapshot {
  paste   Paste    @relation(fields: [pasteId], references: [id])
  pasteId String   @db.Char(8)
  time    DateTime @default(now())
  until   DateTime @updatedAt
  public  Boolean
  data    String?

  @@id([pasteId, time])
}

model Judgement {
  time    DateTime @db.Timestamp(0)
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  content String   @db.VarChar

  @@id([time, userId])
  @@index([time(sort: Desc)])
  @@index([userId])
}
